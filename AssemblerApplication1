
.include "m16def.inc"

//constants definition
.equ segind0 = 0x3F	//7-segment LED indicator's digits definitions
.equ segind1 = 0x6	//		 0
.equ segind2 = 0x5B	//		 _
.equ segind3 = 0x4F	//	5	|_|	1  <--6
.equ segind4 = 0x66	//	4	|_|.7	2 
.equ segind5 = 0x6D	//
.equ segind6 = 0x7D	//		 3
.equ segind7 = 0x7	//
.equ segind8 = 0x7F	//
.equ segind9 = 0x6F	//
.equ segindDash = 0b_0100_0000		//"-" sign
.equ segindA = 0b_0111_0111		//"A"
.equ segindB = 0b_0111_1100		//"b"
.equ segindC = 0b_0011_1001		//"C"
.equ segindD = 0b_0101_1110		//"d"
.equ segindE = 0b_0111_1001		//"E"
.equ segindF = 0b_0111_0001		//"F"

.equ segindR = 0b_0101_0000		//"r"

.equ presetLow = 0xA1	//Here we can set a desired period of time for a precise delay (2 bytes long)
.equ presetHigh = 0x01	//on 16 MHz and with no prescaler, there is approx. 62500 (0xF424) overflows per second
//150 Hz (0x01A1) works well for the LED indicator

//symbolic custom registers names
.def digitToDisp1 = R21			//1st digit to be displayed on the LED. Only hexadecimal digits are defined!
.def digitToDisp2 = R22			//2nd digit to be displayed on the LED
.def digitToDisp3 = R23			//3rd digit to be displayed on the LED
.def overflowsCounterLow = R24		//incrementing every time when overflow of the timer0 occurs
.def overflowsCounterHigh = R25		//my my, there's too many overflows for a humble 8-bit register

;--------------------------------------------------------------------------------------------
.CSEG
//Reset and Interrupt Vectors table

	.ORG 0x0000	;(RESET) 
	RJMP Reset

	.ORG INT0addr	;(INT0) External Interrupt Request 0
	RETI
	.ORG INT1addr	;(INT1) External Interrupt Request 1
	RETI
	.ORG OC2addr	;(TIMER2 COMP) Timer/Counter2 Compare Match
	RETI
	.ORG OVF2addr	;(TIMER2 OVF) Timer/Counter2 Overflow
	RETI
	.ORG ICP1addr	;(TIMER1 CAPT) Timer/Counter1 Capture Event
	RETI
	.ORG OC1Aaddr	;(TIMER1 COMPA) Timer/Counter1 Compare Match A
	RETI
	.ORG OC1Baddr	;(TIMER1 COMPB) Timer/Counter1 Compare Match B
	RETI
	.ORG OVF1addr	;(TIMER1 OVF) Timer/Counter1 Overflow
	RETI

	.ORG OVF0addr	;(TIMER0 OVF) Timer/Counter0 Overflow
	RJMP Timer0Over

	.ORG SPIaddr	;(SPI,STC) Serial Transfer Complete
	RETI
	.ORG URXCaddr	;(USART,RXC) USART, Rx Complete
	RETI
	.ORG UDREaddr	;(USART,UDRE) USART Data Register Empty
	RETI
	.ORG UTXCaddr	;(USART,TXC) USART, Tx Complete
	RETI
	.ORG ADCCaddr	;(ADC) ADC Conversion Complete
	RETI
	.ORG ERDYaddr	;(EE_RDY) EEPROM Ready
	RETI
	.ORG ACIaddr	;(ANA_COMP) Analog Comparator
	RETI
	.ORG TWIaddr	;(TWI) 2-wire Serial Interface
	RETI
	.ORG INT2addr	;(INT2) External Interrupt Request 2
	RETI
	.ORG OC0addr	;(TIMER0 COMP) Timer/Counter0 Compare Match
	RETI
	.ORG SPMRaddr	;(SPM_RDY) Store Program Memory Ready
	RETI

.ORG INT_VECTORS_SIZE	;end of table

;--------------------------------------------------------------------------------------------
//Interrupts Handler//
Timer0Over:	//Timer0 overflow interrupt

IN R19, SREG	//Stores SREG in R19...
PUSH R19	//...and then stores the value of SREG in stack

ADIW overflowsCounterHigh:overflowsCounterLow, 1	//incrementing the whole word

CPI overflowsCounterHigh, presetHigh	//if the higher register contains half of preset...
BRNE exitInt1				//...AND...

CPI overflowsCounterLow, presetLow	//...the lower register contains another half, then go to executing our payload
BRNE exitInt1				//else - exit

//this string executes once in a certain period
	LDI overflowsCounterLow, 0x00	//zeroing the overflows counter
	LDI overflowsCounterHigh, 0x00
	INC R17		//Circling from 0 to 2 periodically (fast), for determine which digit should be lit
	CPI R17, 3	//compare with 3
	BRNE exitInt1	//if not 3, then exit, else reset R17 to 0
	LDI R17, 0	//reset to 0

exitInt1:
POP R19			//Extract SREG value from stack...
OUT SREG, R19		//...and apply it to SREG

RETI
//End of Interrupts Handler//
;--------------------------------------------------------------------------------------------

Reset:
	LDI R16, Low(RAMEND)	//stack initialization
	OUT SPL, R16
	LDI R16, High(RAMEND)
	OUT SPH, R16
	SEI			//interrupts enabled globally

CLT				//clear the T flag which means "incorrect number to display"

LDI digitToDisp1, 0x00		//initializing the LED digits...
LDI digitToDisp2, 0x00
LDI digitToDisp3, 0x00

LDI overflowsCounterLow, 0x00	//...and the register pair of overflows counter...
LDI overflowsCounterHigh, 0x00 

LDI R17, 0x00			//...and the cycling register R17...
LDI R18, 0x00			//...and the R18 (current symbol for the indicator)...
LDI R19, 0x00			//...and the R19 (temporary storage for saving SREG in stack)

LDI R16, 0xFF
OUT DDRC, R16			//write 1-s into each port C...
OUT DDRD, R16			//...and port D direction registers

LDI R16, 0b_0000_0001		//set CS00 bit in TCCR0 register
OUT TCCR0, R16			//now using system clock for timer0 without prescaler

LDI R16, 0b_0000_0001		//set TOIE0 in TIMSK register
OUT TIMSK, R16			//now we have an overflow interrupt enabled for timer0
//TIFR.0 == TOV0 - timer0 overflow flag

LDI R16, 0x00			//cleaning R16 for the order's sake

LDI digitToDisp1, 0x1		//display something on the LED
LDI digitToDisp2, 0xC
LDI digitToDisp3, 0xF

;--------------------------------------------------------------------------------------------
//Main Routine//
Start:

CLT			//if everything will be correct (see below) then clear the T flag (which means "incorrect number")

CPI digitToDisp1, 0x10		//if the 1st register...
BRLO HH1			//...is more than F...
SET				//...then set the T flag (which means "incorrect number")

HH1:

	CPI digitToDisp2, 0x10		//if the 2nd one...
	BRLO HH2			//...is more than F...
	SET				//...then set the T flag (which means "incorrect number")

HH2:

		CPI digitToDisp3, 0x10		//if the 3rd one...
		BRLO HH3			//...is more than F...
		SET				//...then set the T flag (which means "incorrect number")

HH3:

CPI digitToDisp1, 0x00		//same for less than 0
BRPL LL1			//BRanch if PLus (if the N flag in SREG is cleared)
SET

LL1:

	CPI digitToDisp2, 0x00
	BRPL LL2			//BRanch if PLus (if the N flag in SREG is cleared)
	SET

LL2:

		CPI digitToDisp3, 0x00
		BRPL LL3			//BRanch if PLus (if the N flag in SREG is cleared)
		SET

LL3:

CPI R17, 0			//Is it time to display 1st digit of LED?
BREQ firstDig

CPI R17, 1			//Is it time to display 2nd digit of LED?
BREQ secondDig

CPI R17, 2			//Is it time to display 3rd digit of LED?
BREQ thirdDig

RJMP Start		//Go to start
//End of Main Routine//
;--------------------------------------------------------------------------------------------

//Decoding the value of R18//
Decode:		//if one of 3 digits is chosen, then select a sign to be displayed

CPI R18, 0	//depending on what current digit should shows, jumping onto the digits displaying
BREQ disp0
CPI R18, 1
BREQ disp1
CPI R18, 2
BREQ disp2
CPI R18, 3
BREQ disp3
CPI R18, 4
BREQ disp4
CPI R18, 5
BREQ disp5
CPI R18, 6
BREQ disp6
CPI R18, 7
BREQ disp7
CPI R18, 8
BREQ disp8
CPI R18, 9
BREQ disp9
CPI R18, 0x0A
BREQ dispA
CPI R18, 0x0B
BREQ dispB
CPI R18, 0x0C
BREQ dispC
CPI R18, 0x0D
BREQ dispD
CPI R18, 0x0E
BREQ dispE
CPI R18, 0x0F
BREQ dispF

RJMP Start	//Go to start of the Main Routine
;--------------------------------------------------------------------------------------------

firstDig:
LDI R16, 0b_0000_0001		//turn on PC0 (1st digit)
OUT PORTC, R16
BRTS dispE			//if the number is incorrect, display the "E" letter ("Err")
	MOV R18, digitToDisp1	//Just put an appropriate number (that should be lit) in R18
RJMP decode			//go to specific digit displaying

secondDig:
LDI R16, 0b_0000_0010		//turn on PC1 (2nd digit)
OUT PORTC, R16
BRTS dispR			//if the number is incorrect, display the "r" letter ("Err")
	MOV R18, digitToDisp2	//Just put an appropriate number (that should be lit) in R18
RJMP decode			//go to specific digit displaying

thirdDig:
LDI R16, 0b_0000_0100		//turn on PC2 (3rd digit)
OUT PORTC, R16
BRTS dispR			//if the number is incorrect, display the "r" letter ("Err")
	MOV R18, digitToDisp3	//Just put an appropriate number (that should be lit) in R18
RJMP decode			//go to specific digit displaying

;--------------------------------------------------------------------------------------------

disp0:
LDI R16, segind0	//displays 0...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp1:
LDI R16, segind1	//displays 1...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp2:
LDI R16, segind2	//displays 2...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp3:
LDI R16, segind3	//displays 3...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp4:
LDI R16, segind4	//displays 4...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp5:
LDI R16, segind5	//displays 5...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp6:
LDI R16, segind6	//displays 6...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp7:
LDI R16, segind7	//displays 7...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp8:
LDI R16, segind8	//displays 8...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

disp9:
LDI R16, segind9	//displays 9...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispA:
LDI R16, segindA	//displays A...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispB:
LDI R16, segindB	//displays B...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispC:
LDI R16, segindC	//displays C...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispD:
LDI R16, segindD	//displays D...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispE:
LDI R16, segindE	//displays E...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

dispF:
LDI R16, segindF	//displays F...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

;---

dispR:
LDI R16, segindR	//displays R...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start

;---

dispDash:
LDI R16, segindDash	//displays "-"...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//Get back to the start
