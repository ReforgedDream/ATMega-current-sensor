
.include "m16def.inc"

//constants definition
.equ segind0 = 0x3F	//7-segment LED indicator's digits definitions
.equ segind1 = 0x6	//		 0
.equ segind2 = 0x5B	//		 _
.equ segind3 = 0x4F	//	5	|_|	1  <--6
.equ segind4 = 0x66	//	4	|_|.7	2 
.equ segind5 = 0x6D	//
.equ segind6 = 0x7D	//		 3
.equ segind7 = 0x7	//
.equ segind8 = 0x7F	//
.equ segind9 = 0x6F	//

.equ presetLow = 0x24	//Here we can set a desired period of time for a precise delay (2 bytes long)
.equ presetHigh = 0xF4	//on 16 MHz and with no prescaler, there is approx. 62500 (0xF424) overflows per second

//symbolic custom registers names
.def numberToDisp = R23			//number to be displayed on the LED
.def overflowsCounterLow = R24		//incrementing every time when overflow of the timer0 occurs
.def overflowsCounterHigh = R25		//my my, there's too many overflows for a humble 8-bit register

.CSEG
//Reset and Interrupt Vectors table

	.ORG 0x0000	;(RESET) 
	RJMP Reset

	.ORG INT0addr	;(INT0) External Interrupt Request 0
	RETI
	.ORG INT1addr	;(INT1) External Interrupt Request 1
	RETI
	.ORG OC2addr	;(TIMER2 COMP) Timer/Counter2 Compare Match
	RETI
	.ORG OVF2addr	;(TIMER2 OVF) Timer/Counter2 Overflow
	RETI
	.ORG ICP1addr	;(TIMER1 CAPT) Timer/Counter1 Capture Event
	RETI
	.ORG OC1Aaddr	;(TIMER1 COMPA) Timer/Counter1 Compare Match A
	RETI
	.ORG OC1Baddr	;(TIMER1 COMPB) Timer/Counter1 Compare Match B
	RETI
	.ORG OVF1addr	;(TIMER1 OVF) Timer/Counter1 Overflow
	RETI

	.ORG OVF0addr	;(TIMER0 OVF) Timer/Counter0 Overflow
	RJMP Timer0Over

	.ORG SPIaddr	;(SPI,STC) Serial Transfer Complete
	RETI
	.ORG URXCaddr	;(USART,RXC) USART, Rx Complete
	RETI
	.ORG UDREaddr	;(USART,UDRE) USART Data Register Empty
	RETI
	.ORG UTXCaddr	;(USART,TXC) USART, Tx Complete
	RETI
	.ORG ADCCaddr	;(ADC) ADC Conversion Complete
	RETI
	.ORG ERDYaddr	;(EE_RDY) EEPROM Ready
	RETI
	.ORG ACIaddr	;(ANA_COMP) Analog Comparator
	RETI
	.ORG TWIaddr	;(TWI) 2-wire Serial Interface
	RETI
	.ORG INT2addr	;(INT2) External Interrupt Request 2
	RETI
	.ORG OC0addr	;(TIMER0 COMP) Timer/Counter0 Compare Match
	RETI
	.ORG SPMRaddr	;(SPM_RDY) Store Program Memory Ready
	RETI

.ORG INT_VECTORS_SIZE	;end of table

;--------------------------------------------------------------------------------------------
//Interrupts handler
Timer0Over:	//Timer0 overflow interrupt
/*
LDI R22, 0xFF
CPSE (overflowsCounterHigh&overflowsCounterLow), R22	//if bitwise AND of the overflowsCounter's parts returns 
				    			//0xFF, then skip next string
*/
ADIW overflowsCounterHigh:overflowsCounterLow, 1	//incrementing the whole word

CPI overflowsCounterHigh, presetHigh		//if the higher register contains half of preset...
BREQ checking2
RETI
checking2: 
	CPI overflowsCounterLow, presetLow	//AND the lower register contains another half...
	BREQ payload				//....then go to executing our payload
RETI

payload:
	LDI overflowsCounterLow, 0x00	//zeroing the overflows counter
	LDI overflowsCounterHigh, 0x00
	
	//this string executes once in a certain period
RETI
;--------------------------------------------------------------------------------------------
/*Obsolete
//LDI R22, 61		//just because stupid CPSE can't into direct numbers
//CPSE R21, R22
Obsolete*/
;--------------------------------------------------------------------------------------------

Reset:
	LDI R16, Low(RAMEND)	//stack initialization
	OUT SPL, R16
	LDI R16, High(RAMEND)
	OUT SPH, R16
	SEI			//interrupts enabled globally

LDI numberToDisp, 0x00		//initializing periods counter...
LDI overflowsCounterLow, 0x00	//...and the register pair of overflows counter
LDI overflowsCounterHigh, 0x00 

LDI R16, 0xFF
OUT DDRC, R16	//write 1-s into each port C...
OUT DDRD, R16	//...and port D direction registers

LDI R16, 0b_0000_0001		//set CS00 bit in TCCR0 register
OUT TCCR0, R16			//now using system clock for timer0 without prescaler

LDI R16, 0b_0000_0001		//set TOIE0 in TIMSK register
OUT TIMSK, R16			//now we have an overflow interrupt enabled for timer0
//TIFR.0 == TOV0 - timer0 overflow flag

LDI R16, 0x4		//4h=00000100b, turn on PC2 (3rd digit)
OUT PORTC, R16

LDI R16, 0x00		//cleaning R16 for the order's sake

Start:
/*
CPI digitToDisp, 0	//branch if 0 second
BREQ second0
CPI digitToDisp, 1	//branch if 1st second
BREQ second1
CPI digitToDisp, 2	//branch if 2nd second
BREQ second2
CPI digitToDisp, 3	//branch if 3rd second
BREQ second3
CPI digitToDisp, 4	//branch if 4th second
BREQ second4
CPI digitToDisp, 5	//branch if 5th second
BREQ second5
CPI digitToDisp, 6	//branch if 6th second
BREQ second6
CPI digitToDisp, 7	//branch if 7th second
BREQ second7
CPI digitToDisp, 8	//branch if 8th second
BREQ second8
CPI digitToDisp, 9	//branch if 9th second
BREQ second9
*/
RJMP Start		//checking decimal seconds counter infinitely

second0:
LDI R16, segind0	//displays 0...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second1:
LDI R16, segind1	//displays 1...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second2:
LDI R16, segind2	//displays 2...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second3:
LDI R16, segind3	//displays 3...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second4:
LDI R16, segind4	//displays 4...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second5:
LDI R16, segind5	//displays 5...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second6:
LDI R16, segind6	//displays 6...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second7:
LDI R16, segind7	//displays 7...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second8:
LDI R16, segind8	//displays 8...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking

second9:
LDI R16, segind9	//displays 9...
OUT PORTD, R16		//...on the LED indicator
RJMP Start		//go checking
